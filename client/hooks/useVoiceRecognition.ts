import { useState, useRef, useCallback, useEffect } from "react";

interface UseVoiceRecognitionProps {
  onTranscript?: (text: string) => void;
  onCommand?: (command: string) => void;
  lang?: string;
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
const isMobile = () => {
  return (
    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
      navigator.userAgent,
    ) ||
    "ontouchstart" in window ||
    navigator.maxTouchPoints > 0
  );
};

export const useVoiceRecognition = ({
  onTranscript,
  onCommand,
  lang = "ru-RU",
}: UseVoiceRecognitionProps) => {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState("");
  const [isSupported, setIsSupported] = useState(false);

  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const isProcessingRef = useRef(false);
  const restartTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const restartAttemptsRef = useRef(0);
  const lastStartTimeRef = useRef(0);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–∞—É–∑–µ—Ä–æ–º
  useEffect(() => {
    const supported =
      "webkitSpeechRecognition" in window || "SpeechRecognition" in window;
    setIsSupported(supported);

    if (!supported) {
      console.warn("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ");
    }
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
  const initializeRecognition = useCallback(() => {
    if (!isSupported) return null;

    const SpeechRecognition =
      (window as any).SpeechRecognition ||
      (window as any).webkitSpeechRecognition;
    const recognition = new SpeechRecognition();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const mobile = isMobile();

    recognition.continuous = true;
    recognition.interimResults = !mobile; // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    recognition.lang = lang;
    recognition.maxAlternatives = 1;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    if (mobile) {
      recognition.lang = lang;
      // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if ("grammars" in recognition) {
        recognition.grammars = new (window as any).SpeechGrammarList();
      }
    }

    recognition.onstart = () => {
      console.log("üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∑–∞–ø—É—â–µ–Ω–æ");
      setIsListening(true);
      isProcessingRef.current = false;
    };

    recognition.onresult = (event) => {
      if (isProcessingRef.current) {
        console.log("‚è∏Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è");
        return;
      }

      let finalTranscript = "";
      let interimTranscript = "";

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (let i = event.resultIndex; i < event.results.length; i++) {
        const transcript = event.results[i][0].transcript;
        const confidence = event.results[i][0].confidence || 1;

        // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Ç—Ä–µ–±—É–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        const mobile = isMobile();
        const minConfidence = mobile ? 0.6 : 0.3;

        if (confidence >= minConfidence) {
          if (event.results[i].isFinal) {
            finalTranscript += transcript;
          } else if (!mobile) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
            interimTranscript += transcript;
          }
        }
      }

      const currentTranscript = (finalTranscript + interimTranscript).trim();

      if (currentTranscript) {
        setTranscript(currentTranscript);
        onTranscript?.(currentTranscript);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (finalTranscript.trim() && !isProcessingRef.current) {
        isProcessingRef.current = true;
        const command = finalTranscript.trim();

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–≤–µ—Ä–æ—è—Ç–Ω–æ –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è)
        if (command.length < 2) {
          isProcessingRef.current = false;
          return;
        }

        console.log("‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É:", command);

        // –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ
        setTranscript("");

        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–∏–π timeout –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        const delay = isMobile() ? 100 : 0;

        setTimeout(() => {
          onCommand?.(command);
          isProcessingRef.current = false;
          console.log("üîÑ –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ");
        }, delay);
      }
    };

    recognition.onerror = (event) => {
      console.log("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", event.error);

      if (
        event.error === "not-allowed" ||
        event.error === "service-not-allowed"
      ) {
        console.error("üö´ –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω");
        setIsListening(false);
        isProcessingRef.current = false;
        restartAttemptsRef.current = 0;
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ ÔøΩÔøΩ–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ (—á–∞—Å—Ç—ã–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö)
      if (event.error === "network" || event.error === "service-not-allowed") {
        console.log("üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å");
        restartAttemptsRef.current++;

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        if (restartAttemptsRef.current > 3) {
          console.log("üõë –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º");
          setIsListening(false);
          isProcessingRef.current = false;
          restartAttemptsRef.current = 0;
          return;
        }
      }

      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
      isProcessingRef.current = false;
    };

    recognition.onend = () => {
      console.log("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å");

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–ª—É—à–∞—Ç—å
      if (isListening && !isProcessingRef.current) {
        if (restartTimeoutRef.current) {
          clearTimeout(restartTimeoutRef.current);
        }

        // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        const mobile = isMobile();
        const restartDelay = mobile ? 300 : 100;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞
        const now = Date.now();
        const timeSinceLastStart = now - lastStartTimeRef.current;
        const minInterval = mobile ? 500 : 200;

        const actualDelay = Math.max(
          restartDelay,
          minInterval - timeSinceLastStart,
        );

        restartTimeoutRef.current = setTimeout(() => {
          if (isListening && recognitionRef.current) {
            try {
              lastStartTimeRef.current = Date.now();
              recognitionRef.current.start();
              console.log(
                `üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–∑–∞–¥–µ—Ä–∂–∫–∞: ${actualDelay}ms)`,
              );
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
              restartAttemptsRef.current = 0;
            } catch (error) {
              console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:", error);
              restartAttemptsRef.current++;

              // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
              if (restartAttemptsRef.current > 5) {
                console.log(
                  "üõë –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æÔøΩÔøΩ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º",
                );
                setIsListening(false);
                isProcessingRef.current = false;
                restartAttemptsRef.current = 0;
              }
            }
          }
        }, actualDelay);
      }
    };

    return recognition;
  }, [isSupported, lang, onTranscript, onCommand, isListening]);

  // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const startListening = useCallback(() => {
    if (!isSupported) {
      console.warn("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
      return;
    }

    if (isListening) {
      console.log("üé§ –£–∂–µ —Å–ª—É—à–∞–µ–º");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    const now = Date.now();
    const timeSinceLastStart = now - lastStartTimeRef.current;
    const mobile = isMobile();
    const minInterval = mobile ? 500 : 100;

    if (timeSinceLastStart < minInterval) {
      console.log(
        `‚è±Ô∏è –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–Ω–∏–π –∑–∞–ø—É—Å–∫, –∂–¥–µ–º ${minInterval - timeSinceLastStart}ms`,
      );
      setTimeout(() => startListening(), minInterval - timeSinceLastStart);
      return;
    }

    try {
      // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º recognition –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æÔøΩÔøΩ—Å—Ç–≤
      if (mobile || !recognitionRef.current) {
        recognitionRef.current = initializeRecognition();
      }

      if (recognitionRef.current) {
        isProcessingRef.current = false;
        restartAttemptsRef.current = 0;
        setTranscript("");
        lastStartTimeRef.current = now;
        recognitionRef.current.start();
        console.log("üé§ –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å");
      }
    } catch (error) {
      console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:", error);
      setIsListening(false);

      // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –±–æ–ª—å—à–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
      if (mobile && restartAttemptsRef.current < 3) {
        restartAttemptsRef.current++;
        setTimeout(() => {
          if (!isListening) {
            startListening();
          }
        }, 1000);
      }
    }
  }, [isSupported, initializeRecognition, isListening]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
  const stopListening = useCallback(() => {
    console.log("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ");

    setIsListening(false);
    setTranscript("");
    isProcessingRef.current = false;
    restartAttemptsRef.current = 0;

    if (restartTimeoutRef.current) {
      clearTimeout(restartTimeoutRef.current);
      restartTimeoutRef.current = null;
    }

    if (recognitionRef.current) {
      try {
        recognitionRef.current.stop();
        recognitionRef.current.abort();
      } catch (error) {
        console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", error);
      }
      recognitionRef.current = null;
    }
  }, []);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const toggleListening = useCallback(() => {
    if (isListening) {
      stopListening();
    } else {
      startListening();
    }
  }, [isListening, startListening, stopListening]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (recognitionRef.current) {
        try {
          recognitionRef.current.stop();
        } catch (error) {
          console.log("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:", error);
        }
      }

      if (restartTimeoutRef.current) {
        clearTimeout(restartTimeoutRef.current);
      }
    };
  }, []);

  return {
    isListening,
    transcript,
    isSupported,
    startListening,
    stopListening,
    toggleListening,
  };
};
