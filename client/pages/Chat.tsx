import React, { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { cn } from "@/lib/utils";
import { ChatMessage, ChatRequest, ChatResponse } from "@shared/api";
import {
  Send,
  Bot,
  User,
  Loader2,
  MessageCircle,
  ArrowLeft,
} from "lucide-react";
import { Link } from "react-router-dom";

// –§—É–Ω–∫—Ü–∏—è fallback –æ—Ç–≤–µ—Ç–æ–≤
const getFallbackResponse = (userInput: string): string => {
  const input = userInput.toLowerCase();

  if (input.includes("–ø—Ä–∏–≤–µ—Ç") || input.includes("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π") || input.includes("–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å")) {
    return "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ü—è—Ç–Ω–∏—Ü–∞, –≤–∞—à –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ. –†–∞—Å—Å–∫–∞–∂—É –æ –Ω–∞—à–∏—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!";
  }

  if (input.includes("—Ç–∞—Ä–∏—Ñ") || input.includes("—Ü–µ–Ω") || input.includes("—Å—Ç–æ–∏–º–æ—Å—Ç—å") || input.includes("–ø—Ä–∞–π—Å")) {
    return "üí∞ –ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:\n\nü•â BASIC - 2.500.000 —Å—É–º:\n‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω\n‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞\n‚Ä¢ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 3 –º–µ—Å—è—Ü–∞\n\nü•à PRO - 3.500.000 —Å—É–º:\n‚Ä¢ –í—Å–µ –∏–∑ Basic +\n‚Ä¢ –ò–ò-—á–∞—Ç –±–æ—Ç\n‚Ä¢ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 6 –º–µ—Å—è—Ü–µ–≤\n\nü•á MAX - 5.500.000 —Å—É–º:\n‚Ä¢ –í—Å–µ –∏–∑ Pro +\n‚Ä¢ –î–∂–∞—Ä–≤–∏—Å —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏\n‚Ä¢ 3D —ç–ª–µ–º–µ–Ω—Ç—ã\n‚Ä¢ VR/AR –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 12 –º–µ—Å—è—Ü–µ–≤";
  }

  if (input.includes("—Å–ø–∞—Å–∏–±–æ") || input.includes("–±–ª–∞–≥–æ–¥–∞—Ä—é")) {
    return "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å —Å –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –∏–ª–∏ —É—Å–ª—É–≥–∞–º - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!";
  }

  if (input.includes("—É—Å–ª—É–≥") || input.includes("—á—Ç–æ –¥–µ–ª–∞–µ—Ç") || input.includes("—á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è")) {
    return "üöÄ STARK INDUSTRIES AI DIVISION - –º—ã —Å–æ–∑–¥–∞—ë–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã —Å –ò–ò-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏:\n\n‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞\n‚Ä¢ –ò–ò-—á–∞—Ç –±–æ—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤\n‚Ä¢ 3D —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏\n‚Ä¢ VR/AR –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è\n‚Ä¢ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!";
  }

  return "ü§ñ –ü—è—Ç–Ω–∏—Ü–∞ –∑–¥–µ—Å—å! –†–∞–±–æ—Ç–∞—é –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –∫–∞–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ:\n‚Ä¢ –ù–∞—à–∏—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö (BASIC, PRO, MAX)\n‚Ä¢ –£—Å–ª—É–≥–∞—Ö –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö\n\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—ÉÔøΩÔøΩ—Ç? üòä";
};

export default function Chat() {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const isRequestInProgressRef = useRef(false);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò
    const welcomeMessage: ChatMessage = {
      role: "assistant",
      content:
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ü—è—Ç–Ω–∏—Ü–∞ ü§ñ\n\n–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –ø–æ –Ω–∞—à–∏–º —Ç–∞—Ä–∏—Ñ–∞–º –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏\n‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n‚Ä¢ –õ—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏\n\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
      timestamp: Date.now(),
    };
    setMessages([welcomeMessage]);
  }, []);

  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading || isRequestInProgressRef.current)
      return;

    isRequestInProgressRef.current = true;

    const userMessage: ChatMessage = {
      role: "user",
      content: inputMessage.trim(),
      timestamp: Date.now(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputMessage("");
    setIsLoading(true);

    try {
      const chatRequest: ChatRequest = {
        messages: [...messages, userMessage],
      };

      const response = await fetch("/api/groq-chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(chatRequest),
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º body
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // –ö–ª–æ–Ω–∏—ÄÔøΩÔøΩ–µ–º response –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è body
      const responseClone = response.clone();
      let data: ChatResponse;

      try {
        data = await responseClone.json();
      } catch (parseError) {
        console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", parseError);
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—ÄÔøΩÔøΩ–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
      }

      if (data.success && data.message) {
        const assistantMessage: ChatMessage = {
          role: "assistant",
          content: data.message,
          timestamp: Date.now(),
        };
        setMessages((prev) => [...prev, assistantMessage]);
      } else {
        // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ API –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        const fallbackMessage = getFallbackResponse(userMessage.content);
        const assistantMessage: ChatMessage = {
          role: "assistant",
          content: fallbackMessage,
          timestamp: Date.now(),
        };
        setMessages((prev) => [...prev, assistantMessage]);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);

      // –í–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º fallback –æ—Ç–≤–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
      const fallbackMessage = getFallbackResponse(userMessage.content);

      const assistantMessage: ChatMessage = {
        role: "assistant",
        content: fallbackMessage,
        timestamp: Date.now(),
      };
      setMessages((prev) => [...prev, assistantMessage]);
    } finally {
      setIsLoading(false);
      isRequestInProgressRef.current = false;
      inputRef.current?.focus();
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const formatTime = (timestamp: number) => {
    return new Date(timestamp).toLocaleTimeString("ru-RU", {
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <div className="border-b border-white/10 bg-black/50 backdrop-blur-sm sticky top-0 z-10">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Link to="/">
                <Button
                  variant="ghost"
                  size="sm"
                  className="text-white hover:text-white hover:bg-white/10"
                >
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  –ù–∞ –≥–ª–∞–≤–Ω—É—é
                </Button>
              </Link>
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                  <Bot className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold">–ß–∞—Ç —Å –üÔøΩÔøΩ—Ç–Ω–∏—Ü–µ–π ü§ñ</h1>
                  <p className="text-sm text-white/60">
                    –°—É–ø–µ—Ä-—É–º–Ω—ã–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç ‚ú®
                  </p>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-2 text-sm text-white/60">
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
              <span>–û–Ω–ª–∞–π–Ω</span>
            </div>
          </div>
        </div>
      </div>

      {/* Chat Container */}
      <div className="container mx-auto px-4 py-6 max-w-4xl">
        <div className="bg-white/[0.02] border border-white/10 rounded-3xl overflow-hidden h-[calc(100vh-200px)] flex flex-col">
          {/* Messages Area */}
          <ScrollArea className="flex-1 p-6">
            <div className="space-y-6">
              {messages.map((message, index) => (
                <div
                  key={index}
                  className={cn(
                    "flex items-start space-x-3 animate-fadeIn",
                    message.role === "user" ? "justify-end" : "justify-start",
                  )}
                >
                  {message.role === "assistant" && (
                    <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0">
                      <Bot className="w-4 h-4 text-white" />
                    </div>
                  )}

                  <div
                    className={cn(
                      "max-w-xs sm:max-w-md lg:max-w-2xl px-4 py-3 rounded-2xl relative",
                      message.role === "user"
                        ? "bg-white text-black ml-auto"
                        : "bg-white/10 border border-white/20 text-white",
                    )}
                  >
                    <p className="text-sm leading-relaxed whitespace-pre-wrap">
                      {message.content}
                    </p>
                    <div
                      className={cn(
                        "text-xs mt-2 opacity-70",
                        message.role === "user"
                          ? "text-black/60"
                          : "text-white/60",
                      )}
                    >
                      {formatTime(message.timestamp)}
                    </div>
                  </div>

                  {message.role === "user" && (
                    <div className="w-8 h-8 bg-white/10 rounded-full flex items-center justify-center border border-white/20 flex-shrink-0">
                      <User className="w-4 h-4 text-white" />
                    </div>
                  )}
                </div>
              ))}

              {/* Typing Indicator */}
              {isLoading && (
                <div className="flex items-start space-x-3 animate-fadeIn">
                  <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <Bot className="w-4 h-4 text-white" />
                  </div>
                  <div className="bg-white/10 border border-white/20 text-white px-4 py-3 rounded-2xl">
                    <div className="flex items-center space-x-2">
                      <Loader2 className="w-4 h-4 animate-spin" />
                      <span className="text-sm">–ü—è—Ç–Ω–∏—Ü–∞ –ø–µ—á–∞—Ç–∞–µ—Ç...</span>
                    </div>
                  </div>
                </div>
              )}

              <div ref={messagesEndRef} />
            </div>
          </ScrollArea>

          {/* Input Area */}
          <div className="p-6 border-t border-white/10">
            <div className="flex items-center space-x-3">
              <div className="flex-1 relative">
                <Input
                  ref={inputRef}
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                  className="bg-white/5 border-white/20 text-white placeholder:text-white/50 pr-12 py-3 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  disabled={isLoading}
                  autoFocus
                />
                <MessageCircle className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/40" />
              </div>
              <Button
                onClick={sendMessage}
                disabled={!inputMessage.trim() || isLoading}
                className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-6 py-3 rounded-xl transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? (
                  <Loader2 className="w-4 h-4 animate-spin" />
                ) : (
                  <Send className="w-4 h-4" />
                )}
              </Button>
            </div>
            <div className="mt-3 text-xs text-white/40 text-center">
              –ù–∞ÔøΩÔøΩ–º–∏—Ç–µ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Ä¢ –ò–ò –º–æ–∂–µ—Ç –æ—à–∏–±–∞—Ç—å—Å—è, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–∞–∂–Ω—É—é
              –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
