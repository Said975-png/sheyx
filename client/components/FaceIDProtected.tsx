import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Shield,
  Scan,
  AlertTriangle,
  CheckCircle,
  Settings,
} from "lucide-react";
import { useAuth } from "@/hooks/useAuth";
import FaceIDModal from "./FaceIDModal";

interface FaceIDProtectedProps {
  children: React.ReactNode;
  requireFaceID?: boolean;
}

interface FaceDescriptor {
  id: string;
  userId: string;
  descriptors: number[][];
  createdAt: string;
  lastUsed: string;
}

export default function FaceIDProtected({
  children,
  requireFaceID = true,
}: FaceIDProtectedProps) {
  const { currentUser } = useAuth();
  const [isVerified, setIsVerified] = useState(false);
  const [hasFaceID, setHasFaceID] = useState(false);
  const [showFaceIDModal, setShowFaceIDModal] = useState(false);
  const [faceIDMode, setFaceIDMode] = useState<"register" | "verify">("verify");
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [isLoading, setIsLoading] = useState(true);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Face ID
  useEffect(() => {
    if (!currentUser) {
      setIsLoading(false);
      return;
    }

    const checkFaceID = () => {
      const faces = JSON.parse(
        localStorage.getItem("faceDescriptors") || "[]",
      ) as FaceDescriptor[];
      const userFace = faces.find((face) => face.userId === currentUser.id);
      setHasFaceID(!!userFace);
      setIsLoading(false);

      // –ï—Å–ª–∏ Face ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
      if (userFace && requireFaceID) {
        setFaceIDMode("verify");
        setShowFaceIDModal(true);
      } else if (!userFace && requireFaceID) {
        // –ï—Å–ª–∏ Face ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        setFaceIDMode("register");
      }
    };

    checkFaceID();
  }, [currentUser, requireFaceID]);

  const handleFaceIDSuccess = () => {
    if (faceIDMode === "register") {
      setHasFaceID(true);
      setSuccess(
        "Face ID —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.",
      );
      setIsVerified(true);
    } else {
      setIsVerified(true);
      setSuccess("–õ–∏—Ü–æ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.");
    }
    setError("");
  };

  const handleFaceIDError = (errorMessage: string) => {
    setError(errorMessage);
    setSuccess("");

    if (faceIDMode === "verify") {
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
      setTimeout(() => {
        setError("");
      }, 3000);
    }
  };

  const startFaceIDSetup = () => {
    setFaceIDMode("register");
    setShowFaceIDModal(true);
    setError("");
    setSuccess("");
  };

  const startFaceIDVerification = () => {
    setFaceIDMode("verify");
    setShowFaceIDModal(true);
    setError("");
    setSuccess("");
  };

  const skipFaceID = () => {
    setIsVerified(true);
  };

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  if (!currentUser) {
    return (
      <Card className="theme-card w-full max-w-md mx-auto">
        <CardContent className="p-8 text-center">
          <Shield className="w-16 h-16 text-purple-400 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-white mb-2">
            –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
          </h2>
          <p className="text-white/70">
            –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
          </p>
        </CardContent>
      </Card>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (isLoading) {
    return (
      <Card className="theme-card w-full max-w-md mx-auto">
        <CardContent className="p-8 text-center">
          <div className="animate-spin w-8 h-8 border-2 border-purple-400 border-t-transparent rounded-full mx-auto mb-4"></div>
          <p className="text-white/70">–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...</p>
        </CardContent>
      </Card>
    );
  }

  // –ï—Å–ª–∏ Face ID –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
  if (!requireFaceID || isVerified) {
    return <>{children}</>;
  }

  // –ï—Å–ª–∏ Face ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
  if (!hasFaceID) {
    return (
      <div className="space-y-4">
        <Card className="theme-card w-full max-w-md mx-auto">
          <CardHeader>
            <CardTitle className="text-white text-center flex items-center justify-center space-x-2">
              <Shield className="w-5 h-5" />
              <span>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4 text-center">
            <div className="space-y-2">
              <Scan className="w-12 h-12 text-purple-400 mx-auto" />
              <h3 className="text-lg font-semibold text-white">
                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Face ID
              </h3>
              <p className="text-white/70 text-sm">
                –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
                –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü–∞. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø
                —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å.
              </p>
            </div>

            <div className="space-y-2">
              <Button
                onClick={startFaceIDSetup}
                className="w-full bg-purple-600 hover:bg-purple-700 text-white"
              >
                <Scan className="w-4 h-4 mr-2" />
                –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Face ID
              </Button>

              <Button
                onClick={skipFaceID}
                variant="outline"
                className="w-full border-white/20 text-white/70 hover:text-white"
              >
                –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
              </Button>
            </div>

            <div className="text-xs text-white/50 space-y-1">
              <p>‚úì –í–∞—à–∏ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ</p>
              <p>‚úì –ù–∏–∫—Ç–æ –∫—Ä–æ–º–µ –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø</p>
              <p>‚úì –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä</p>
            </div>
          </CardContent>
        </Card>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏ —É—Å–ø–µ—Ö–µ */}
        {error && (
          <Card className="theme-card border-red-500/20 bg-red-500/10">
            <CardContent className="p-4">
              <div className="flex items-center space-x-2 text-red-300">
                <AlertTriangle className="w-5 h-5" />
                <span className="text-sm">{error}</span>
              </div>
            </CardContent>
          </Card>
        )}

        {success && (
          <Card className="theme-card border-green-500/20 bg-green-500/10">
            <CardContent className="p-4">
              <div className="flex items-center space-x-2 text-green-300">
                <CheckCircle className="w-5 h-5" />
                <span className="text-sm">{success}</span>
              </div>
            </CardContent>
          </Card>
        )}

        <FaceIDModal
          isOpen={showFaceIDModal}
          onClose={() => setShowFaceIDModal(false)}
          mode={faceIDMode}
          onSuccess={handleFaceIDSuccess}
          onError={handleFaceIDError}
        />
      </div>
    );
  }

  // –ï—Å–ª–∏ Face ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ —Ç—Ä–µ–±ÔøΩÔøΩ–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
  return (
    <div className="space-y-4">
      <Card className="theme-card w-full max-w-md mx-auto">
        <CardHeader>
          <CardTitle className="text-white text-center flex items-center justify-center space-x-2">
            <Shield className="w-5 h-5" />
            <span>–î–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4 text-center">
          <div className="space-y-2">
            <Scan className="w-12 h-12 text-purple-400 mx-auto" />
            <h3 className="text-lg font-semibold text-white">
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å
            </h3>
            <p className="text-white/70 text-sm">
              –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É Face ID.
            </p>
          </div>

          <div className="space-y-2">
            <Button
              onClick={startFaceIDVerification}
              className="w-full bg-purple-600 hover:bg-purple-700 text-white"
            >
              <Scan className="w-4 h-4 mr-2" />
              –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–æ
            </Button>

            <Button
              onClick={skipFaceID}
              variant="outline"
              className="w-full border-white/20 text-white/70 hover:text-white"
            >
              –í–æ–π—Ç–∏ –±–µ–∑ Face ID
            </Button>
          </div>

          <div className="text-xs text-white/50">
            <p>üîí –ó–∞—â–∏—â–µ–Ω–æ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π</p>
          </div>
        </CardContent>
      </Card>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏ —É—Å–ø–µ—Ö–µ */}
      {error && (
        <Card className="theme-card border-red-500/20 bg-red-500/10">
          <CardContent className="p-4">
            <div className="flex items-center space-x-2 text-red-300">
              <AlertTriangle className="w-5 h-5" />
              <span className="text-sm">{error}</span>
            </div>
            <div className="mt-2">
              <Button
                onClick={startFaceIDVerification}
                size="sm"
                className="bg-red-600 hover:bg-red-700 text-white"
              >
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {success && (
        <Card className="theme-card border-green-500/20 bg-green-500/10">
          <CardContent className="p-4">
            <div className="flex items-center space-x-2 text-green-300">
              <CheckCircle className="w-5 h-5" />
              <span className="text-sm">{success}</span>
            </div>
          </CardContent>
        </Card>
      )}

      <FaceIDModal
        isOpen={showFaceIDModal}
        onClose={() => setShowFaceIDModal(false)}
        mode={faceIDMode}
        onSuccess={handleFaceIDSuccess}
        onError={handleFaceIDError}
      />
    </div>
  );
}
