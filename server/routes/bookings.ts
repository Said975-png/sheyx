import { RequestHandler } from "express";
import {
  BookingData,
  CreateBookingRequest,
  CreateBookingResponse,
  GetBookingsResponse,
  UpdateBookingRequest,
  UpdateBookingResponse,
} from "@shared/api";
import * as fs from "fs";
import * as path from "path";

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –±—Ä–æ–Ω—è—Ö
const BOOKINGS_DIR = path.join(process.cwd(), "data", "bookings");
const BOOKINGS_FILE = path.join(BOOKINGS_DIR, "bookings.json");

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(BOOKINGS_DIR)) {
  fs.mkdirSync(BOOKINGS_DIR, { recursive: true });
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –±—Ä–æ–Ω–∏
const loadBookings = (): BookingData[] => {
  try {
    if (fs.existsSync(BOOKINGS_FILE)) {
      const data = fs.readFileSync(BOOKINGS_FILE, "utf-8");
      return JSON.parse(data);
    }
    return [];
  } catch (error) {
    console.error("Error loading bookings:", error);
    return [];
  }
};

const saveBookings = (bookings: BookingData[]): void => {
  try {
    fs.writeFileSync(BOOKINGS_FILE, JSON.stringify(bookings, null, 2));
  } catch (error) {
    console.error("Error saving bookings:", error);
  }
};

const generateBookingId = (): string => {
  return `BOOK-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;
};

// API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏
export const createBooking: RequestHandler = async (req, res) => {
  try {
    console.log("üìÖ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏");
    const userId = (req.headers["user-id"] as string) || "anonymous";
    const bookingData: CreateBookingRequest = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (
      !bookingData.serviceType ||
      !bookingData.clientName ||
      !bookingData.clientEmail ||
      !bookingData.clientPhone ||
      !bookingData.preferredDate ||
      !bookingData.preferredTime
    ) {
      const response: CreateBookingResponse = {
        success: false,
        error: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
      };
      return res.status(400).json(response);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(bookingData.clientEmail)) {
      const response: CreateBookingResponse = {
        success: false,
        error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å",
      };
      return res.status(400).json(response);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneRegex = /^[\+]?[0-9\s\-\(\)]{10,}$/;
    if (!phoneRegex.test(bookingData.clientPhone)) {
      const response: CreateBookingResponse = {
        success: false,
        error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
      };
      return res.status(400).json(response);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    const preferredDate = new Date(bookingData.preferredDate);
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    if (preferredDate < today) {
      const response: CreateBookingResponse = {
        success: false,
        error: "–î–∞—Ç–∞ –±—Ä–æ–Ω–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º",
      };
      return res.status(400).json(response);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏
    const bookingId = generateBookingId();
    const now = new Date().toISOString();

    const newBooking: BookingData = {
      id: bookingId,
      userId,
      clientName: bookingData.clientName,
      clientEmail: bookingData.clientEmail,
      clientPhone: bookingData.clientPhone,
      serviceType: bookingData.serviceType,
      serviceDescription: bookingData.serviceDescription,
      preferredDate: bookingData.preferredDate,
      preferredTime: bookingData.preferredTime,
      notes: bookingData.notes || "",
      status: "pending",
      createdAt: now,
      updatedAt: now,
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–æ–Ω–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
    const bookings = loadBookings();
    bookings.push(newBooking);
    saveBookings(bookings);

    console.log(`‚úÖ –ë—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞: ${bookingId}`);

    const response: CreateBookingResponse = {
      success: true,
      message: "–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
      bookingId,
    };

    res.json(response);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏:", error);
    const response: CreateBookingResponse = {
      success: false,
      error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏",
    };
    res.status(500).json(response);
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserBookings: RequestHandler = async (req, res) => {
  try {
    console.log("üìã –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    const userId = req.headers["user-id"] as string;

    if (!userId || userId === "anonymous") {
      const response: GetBookingsResponse = {
        success: false,
        error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
      };
      return res.status(401).json(response);
    }

    const allBookings = loadBookings();
    const userBookings = allBookings.filter(
      (booking) => booking.userId === userId,
    );

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    userBookings.sort(
      (a, b) =>
        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(),
    );

    console.log(
      `üìã –ù–∞–π–¥–µ–Ω–æ ${userBookings.length} –±—Ä–æ–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`,
    );

    const response: GetBookingsResponse = {
      success: true,
      bookings: userBookings,
    };

    res.json(response);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–µ–π:", error);
    const response: GetBookingsResponse = {
      success: false,
      error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–µ–π",
    };
    res.status(500).json(response);
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
export const getAllBookings: RequestHandler = async (req, res) => {
  try {
    console.log("üîê –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π (–∞–¥–º–∏–Ω)");

    const allBookings = loadBookings();

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    allBookings.sort(
      (a, b) =>
        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(),
    );

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${allBookings.length} –±—Ä–æ–Ω–µ–π –≤—Å–µ–≥–æ`);

    const response: GetBookingsResponse = {
      success: true,
      bookings: allBookings,
    };

    res.json(response);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π:", error);
    const response: GetBookingsResponse = {
      success: false,
      error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–µ–π",
    };
    res.status(500).json(response);
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏
export const updateBooking: RequestHandler = async (req, res) => {
  try {
    console.log("üìù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏");
    const { bookingId } = req.params;
    const updateData: UpdateBookingRequest = req.body;

    if (!bookingId) {
      const response: UpdateBookingResponse = {
        success: false,
        error: "ID –±—Ä–æ–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω",
      };
      return res.status(400).json(response);
    }

    const bookings = loadBookings();
    const bookingIndex = bookings.findIndex(
      (booking) => booking.id === bookingId,
    );

    if (bookingIndex === -1) {
      const response: UpdateBookingResponse = {
        success: false,
        error: "–ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
      };
      return res.status(404).json(response);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–æ–Ω—å
    const booking = bookings[bookingIndex];
    if (updateData.status) booking.status = updateData.status;
    if (updateData.preferredDate)
      booking.preferredDate = updateData.preferredDate;
    if (updateData.preferredTime)
      booking.preferredTime = updateData.preferredTime;
    if (updateData.notes !== undefined) booking.notes = updateData.notes;
    booking.updatedAt = new Date().toISOString();

    bookings[bookingIndex] = booking;
    saveBookings(bookings);

    console.log(`‚úÖ –ë—Ä–æ–Ω—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${bookingId}`);

    const response: UpdateBookingResponse = {
      success: true,
      message: "–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
    };

    res.json(response);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏:", error);
    const response: UpdateBookingResponse = {
      success: false,
      error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏",
    };
    res.status(500).json(response);
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏
export const deleteBooking: RequestHandler = async (req, res) => {
  try {
    console.log("üóëÔ∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏");
    const { bookingId } = req.params;
    const userId = req.headers["user-id"] as string;

    if (!bookingId) {
      const response: UpdateBookingResponse = {
        success: false,
        error: "ID –±—Ä–æ–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω",
      };
      return res.status(400).json(response);
    }

    const bookings = loadBookings();
    const bookingIndex = bookings.findIndex(
      (booking) => booking.id === bookingId,
    );

    if (bookingIndex === -1) {
      const response: UpdateBookingResponse = {
        success: false,
        error: "–ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
      };
      return res.status(404).json(response);
    }

    const booking = bookings[bookingIndex];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –±—Ä–æ–Ω–∏)
    if (userId !== "admin" && booking.userId !== userId) {
      const response: UpdateBookingResponse = {
        success: false,
        error: "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –±—Ä–æ–Ω–∏",
      };
      return res.status(403).json(response);
    }

    // –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω—å
    bookings.splice(bookingIndex, 1);
    saveBookings(bookings);

    console.log(`üóëÔ∏è –ë—Ä–æ–Ω—å —É–¥–∞–ª–µ–Ω–∞: ${bookingId}`);

    const response: UpdateBookingResponse = {
      success: true,
      message: "–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
    };

    res.json(response);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏:", error);
    const response: UpdateBookingResponse = {
      success: false,
      error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏",
    };
    res.status(500).json(response);
  }
};
