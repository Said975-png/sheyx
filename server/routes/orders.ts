import { RequestHandler } from "express";
import nodemailer from "nodemailer";

interface OrderItem {
  id: string;
  name: string;
  price: number;
  description: string;
  category: string;
}

interface OrderData {
  items: OrderItem[];
  formData: {
    fullName: string;
    phone: string;
    description: string;
    referenceUrl?: string;
  };
  total: number;
}

// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const createTransporter = () => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Gmail SMTP –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  return nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: process.env.EMAIL_USER || "temp-email@gmail.com",
      pass: process.env.EMAIL_PASS || "temp-app-password",
    },
  });
};

// –°–æ–∑–¥–∞–µ–º HTML —à–∞–±–ª–æ–Ω –¥–ª—è email
const createOrderEmailTemplate = (orderData: OrderData): string => {
  const { items, formData, total } = orderData;

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ - Jarvis AI</title>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
        .content { background: #f9f9f9; padding: 20px; border-radius: 0 0 8px 8px; }
        .order-item { background: white; margin: 10px 0; padding: 15px; border-radius: 5px; border-left: 4px solid #667eea; }
        .total { font-size: 18px; font-weight: bold; color: #667eea; text-align: right; margin-top: 20px; }
        .customer-info { background: white; padding: 15px; border-radius: 5px; margin: 15px 0; }
        .label { font-weight: bold; color: #555; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>üöÄ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ - Jarvis AI</h1>
          <p>–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–∞–π—Ç–∞</p>
        </div>
        
        <div class="content">
          <h2>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</h2>
          <div class="customer-info">
            <p><span class="label">–§–ò–û:</span> ${formData.fullName}</p>
            <p><span class="label">–¢–µ–ª–µ—Ñ–æ–Ω:</span> ${formData.phone}</p>
          </div>
          
          <h2>üìù –û–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ —Å–∞–π—Ç–∞</h2>
          <div class="customer-info">
            <p>${formData.description}</p>
          </div>

          ${
            formData.referenceUrl
              ? `
          <h2>üåê –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—Ä–∞–∑–µ—Ü —Å–∞–π—Ç–∞</h2>
          <div class="customer-info">
            <p><a href="${formData.referenceUrl}" target="_blank" style="color: #667eea; text-decoration: none;">${formData.referenceUrl}</a></p>
          </div>
          `
              : ""
          }
          
          <h2>üõí –ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏</h2>
          ${items
            .map(
              (item) => `
            <div class="order-item">
              <h3>${item.name}</h3>
              <p>${item.description}</p>
              <p><strong>–¶–µ–Ω–∞: ${item.price.toLocaleString()} —Å—É–º</strong></p>
            </div>
          `,
            )
            .join("")}
          
          <div class="total">
            –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total.toLocaleString()} —Å—É–º
          </div>
          
          <hr style="margin: 20px 0;">
          <p style="color: #666; font-size: 14px;">
            –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ${new Date().toLocaleString("ru-RU")}
          </p>
        </div>
      </div>
    </body>
    </html>
  `;
};

export const handleSendOrder: RequestHandler = async (req, res) => {
  try {
    const orderData: OrderData = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!orderData.items || !orderData.formData || !orderData.total) {
      return res.status(400).json({
        success: false,
        message: "–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞",
      });
    }

    const { fullName, phone, description, referenceUrl } = orderData.formData;
    if (!fullName || !phone || !description) {
      return res.status(400).json({
        success: false,
        message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
      });
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log("=== –ù–û–í–´–ô –ó–ê–ö–ê–ó ===");
    console.log("–ö–ª–∏–µ–Ω—Ç:", { fullName, phone });
    console.log("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:", orderData.total.toLocaleString(), "—Å—É–º");
    console.log(
      "–£—Å–ª—É–≥–∏:",
      orderData.items.map((item) => item.name),
    );
    console.log("–û–ø–∏—Å–∞–Ω–∏–µ:", description.substring(0, 100) + "...");
    console.log("==================");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ email
    const emailConfigured =
      process.env.EMAIL_USER &&
      process.env.EMAIL_PASS &&
      process.env.EMAIL_USER !== "temp-email@gmail.com" &&
      process.env.EMAIL_PASS !== "temp-app-password";

    if (emailConfigured) {
      try {
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä
        const transporter = createTransporter();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email
        const mailOptions = {
          from: process.env.EMAIL_USER,
          to: "saidaurum@gmail.com",
          subject: `üöÄ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç ${fullName} - ${orderData.total.toLocaleString()} —Å—É–º`,
          html: createOrderEmailTemplate(orderData),
          text: `
–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç ${fullName}
–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
–û–ø–∏—Å–∞–Ω–∏–µ: ${description}
${referenceUrl ? `–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—Ä–∞–∑–µ—Ü: ${referenceUrl}` : ""}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${orderData.total.toLocaleString()} —Å—É–º

–ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:
${orderData.items.map((item) => `- ${item.name}: ${item.price.toLocaleString()} —Å—É–º`).join("\n")}
          `,
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        await transporter.sendMail(mailOptions);
        console.log("‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ saidaurum@gmail.com");
      } catch (emailError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", emailError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
      }
    } else {
      console.log("üìß Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∑–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∞—Ö");
    }

    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, –¥–∞–∂–µ –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
    res.json({
      success: true,
      message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
    });
  } catch (error) {
    console.error("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞:", error);

    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞",
    });
  }
};
